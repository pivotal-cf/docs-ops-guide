---
title: Deploying Diego Beta for Windows
---

This topic contains instructions for setting up a Windows cell in a Diego 
deployment. 

A **cell** is a virtual machine (VM) that stages, hosts, and manages application lifecycles. 
See the [Diego Beta Overview](./diego-overview.html) topic for general 
information about Diego Beta.

## <a id='prequisites'></a>Prerequisites ##

* A working Diego deployment
* A Windows Server 2012R2 VM instance that is routable to your Diego deployment
    * See [recommended instance types](https://github.com/cloudfoundry-incubator/diego-release/tree/3b229e0b971402387bd7c1831e96b2a177cbfcae#recommended-instance-types) in the GitHub Diego release repo for details.
    * If you are creating a new Windows image, and not using one predefined and 
supplied by your IaaS, we recommend using this [ISO image](https://msdn.microsoft.com/subscriptions/json/GetDownloadRequest?brand=MSDN&locale=en-us&fileId=62611&activexDisabled=true&akamaiDL=false) as a starting 
point. You must have an MSDN account to download this ISO image.
* A new subnet for the Windows cell
    * You should place the Windows cell and BOSH in separate subnets to avoid potential conflicts. A BOSH deploys fails if the Windows cell uses an IP address that BOSH needs.

## <a id='cell'></a>Step 1: Configure the Windows Cell ##

Follow the instructions below to download and configure the Windows cell.

1. From your Windows cell, log in to the [Pivotal Network](https://network.pivotal.io/).

1. Download `setup.ps1` from the DiegoWindows folder in [Elastic Runtime](https://network.pivotal.io/products/elastic-runtime).

1. Open File Explorer.

1. Right-click on the `setup.ps1` file and select **Run with PowerShell**.
The `setup.ps1` script configures Windows features, DNS settings, and the 
firewall for your Windows cell.

## Step 2: Run the Install Script Generator ##

1. Download `generate.exe` from the DiegoWindows folder in [Elastic Runtime](https://network.pivotal.io/products/elastic-runtime).

1. From a command prompt, run `generate.exe` with the following arguments:
  
<pre class='terminal'>
$ generate.exe -boshUrl https://username:password@bosh-director.example.com:25555 -windowsUsername=Administrator -windowsPassword=Password123! -outputDir C:\diego-windows
</pre>

Find your boshUrl in the [troubleshooting](http://docs.pivotal.io/pivotalcf/customizing/trouble-advanced.html) documentation.

The windowsUsername will be used to run Containerizer. The user provided must be a member of the Administrators group.
All other services will run as the SYSTEM user.

The outputDir specifies the directory that will contain the required certificates and a script to run the installers.

## <a id='msi'></a>Step 3: Install the MSI ##

1. Download both `DiegoWindows.msi` and `GardenWindows.msi` from the DiegoWindows folder in [Elastic Runtime](https://network.pivotal.io/products/elastic-runtime) to the outputDir specified above.

1. Run `install.bat` from the outputDir.

## <a id='confirm-deployment'></a> Step 4: Confirm Successful Deployment ##

1. Launch **Task Manager**.

1. Navigate to the Services tab and confirm that the following services are running:
  <table border='1' class='nice'>
    <tr>
      <th>NAME</th>
      <th>DESCRIPTION</th>
      <th>STATUS</th>
    </tr0>
    <tr>
      <td>Consul</td>
      <td>CF Consul</td>
      <td>Running</td>
    </tr>
    <tr>
      <td>Containerizer</td>
      <td>CF Containerizer</td>
      <td>Running</td>
    </tr>
    <tr>
      <td>GardenWindows</td>
      <td>CF GardenWindows</td>
      <td>Running</td>
    </tr>
    <tr>
      <td>Metron</td>
      <td>CF Metron</td>
      <td>Running</td>
     </tr>
    <tr>
      <td>Rep</td>
      <td>CF Rep</td>
      <td>Running</td>
    </tr>
  </table> 

1. Download/clone the [CF Smoke Tests](https://github.com/cloudfoundry/cf-smoke-tests.git) repository

1. Follow the instructions from the README to run the smoke tests against your
environment with the `enable_windows_tests` configuration flag set to `true`.

This will deploy a sample .NET application to one of your Windows cells and
exercise basic CF functionality to ensure your deployment is functioning
properly.
